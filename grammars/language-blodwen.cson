name: 'Blodwen'
scopeName: 'source.blodwen'
fileTypes: ['blod']
patterns:
  [
    {
      name: 'keyword.control.blodwen'
      match: '\\b(if|then|else|do|let|in|codata|record|dsl)\\b'
    }
    {
      name: 'keyword.control.blodwen'
      match: '\\b(impossible|case|of|total|partial|mutual|infix|infixl|infixr)\\b'
    }
    {
      name: 'keyword.control.blodwen'
      match: '\\b(where|with|syntax|proof|postulate|using|namespace|class|instance|interface|implementation|record|rewrite)\\b'
    }
    {
      name: 'keyword.control.blodwen'
      match:  '\\b(public|private|export|implicit)\\b'
    }
    {
      name: 'comment.line.blodwen'
      match: '(--).*$\n?'
      comment: 'Line comment'
    }
    {
      name: 'comment.documentation.line.blodwen'
      match: '(\\|\\|\\|).*$\n?'
      comment: 'Line comment'
    }
    {
      name: 'storage.type.function.blodwen'
      match: '\\?[-!#\\$%&\\*\\+\\.\\/<=>@\\\\\^\|~:]+|[-!#\\$%&\\*\\+\\.\\/<=>@\\\\\^\|~:\\?][-!#\\$%&\\*\\+\\.\\/<=>@\\\\\^\|~:]*'
    }
    {
      name: 'storage.type.builtin.blodwen'
      match: '\\b(Type|Int|Nat|Integer|Float|Char|String|Ptr|Bits8|Bits16|Bits32|Bits64|Bool)\\b'
    }
    {
      name: 'constant.numeric.blodwen'
      match: '\\b(S|Z)\\b'
    }
    {
      match: '\\b([0-9]+|0([xX][0-9a-fA-F]+|[oO][0-7]+))\\b'
      name: 'constant.numeric.blodwen'
      comment: 'integer literal'
    }
    {
      match: '\\b([0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\b'
      name: 'constant.numeric.float.blodwen'
      comment: 'float literal'
    }
    {
      match: '\\(\\)'
      name: 'constant.unit.blodwen'
    }
    {
      name: 'comment.block.blodwen'
      begin: '\\{-'
      end: '-\\}'
      comment: 'Block comment'
    }
    {
      name: 'string.quoted.double.blodwen'
      begin: '"'
      beginCaptures:
        0:
          name: 'punctuation.definition.string.begin.blodwen'
      end: '"'
      endCaptures:
        0:
          name: 'punctuation.definition.string.end.blodwen'
      patterns:
        [
          {
            include: '#escape_characters'
          }
        ]
    }
    {
      name: 'variable.other.blodwen'
      match : "(?<!\\w)\\'\\w++(?!')"
    }
    {
      name: 'string.quoted.single.blodwen'
      match: "(')(?:(?:\\\\\")|(?:\\\\[0-9]+)|(\\\\o[0-7]+)|(\\\\x[0-9a-fA-F]+)|(?:[^'])|(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL))(')"
      captures:
        1:
          name: 'punctuation.definition.string.begin.blodwen'
        2:
          name: 'constant.character.escape.octal.blodwen'
        3:
          name: 'constant.character.escape.hexadecimal.blodwen'
        4:
          name: 'constant.character.escape.control.blodwen'
        5:
          name: 'punctuation.definition.string.end.blodwen'
      patterns:
        [
          {
            name: 'invalid.illegal.blodwen'
            match: "\\\\n"
          }
        ]
    }
    {
      name: 'keyword.operator.function.infix.blodwen'
      begin: '`(?![\{|\(])'
      beginCaptures:
        0:
          name: 'punctuation.definition.entity.blodwen'
      end: '`'
      endCaptures:
        0:
          name: 'punctuation.definition.entity.blodwen'
    }
    {
      begin: '\\b(module)\\b'
      beginCaptures:
        1:
          name: 'keyword.control.blodwen'
      end: '($|;|(?=--))'
      name: 'meta.module.blodwen'
      patterns:
        [
          {
            match: "([a-zA-Z._']+)"
            name: 'meta.declaration.module.blodwen'
          }
        ]
    }
    {
      begin: '\\b(import\\s+public|import)\\b'
      beginCaptures:
        1:
          name: 'keyword.other.blodwen'
      end: '($|;|(?=--))'
      name: 'meta.import.blodwen'
      patterns:
        [
          {
            match: "([a-zA-Z._']+)"
            name: 'support.other.module.blodwen'
          }
        ]
    }
    {
      name: 'meta.declaration.data.blodwen'
      begin: "\\b(data)\\s+([\\w']+)\\s*(:)?"
      beginCaptures:
        1:
          name: 'keyword.other.blodwen'
        2:
          name: 'entity.name.type.blodwen'
        3:
          name: 'keyword.operator.colon.blodwen'
      end: '\\b(where)\\b|(=)|$'
      endCaptures:
        1:
          name: 'keyword.other.blodwen'
        2:
          name: 'keyword.operator.blodwen'
      patterns:
        [
          include: '#type_signature'
        ]
    }
    {
      name: 'meta.declaration.data.blodwen'
      begin: "\\b(parameters)\\s+(\\()"
      end: "(\\))$"
      beginCaptures:
        1:
          name: 'keyword.other.blodwen'
        2:
          name: 'punctuation.context.begin.blodwen'
      endCaptures:
        1:
          name: 'punctuation.context.begin.blodwen'
      patterns:
        [
            {
              name: 'comment.line.blodwen'
              match: '(--).*$\n?'
            }
            {
              name: 'meta.parameter.block.named.blodwen'
              match: "((\\w+)\\s*(:)\\s*(\\w+)\\s*)"
              captures:
                2:
                  name: 'entity.name.tag.blodwen'
                3:
                  name: 'keyword.operator.colon.blodwen'
            }
        ]
    }
    {
      include: '#function_signature'
    }
    {
      name: 'keyword.operator.blodwen'
      match: "[|&!%$?~+:\\-.=</>\\\\*]+"
    }
    {
      include: '#data_ctor'
    }
  ]
repository:
  context_signature:
    patterns:
      [
        {
          name: 'meta.context-signature.blodwen'
          match: "([\\w._']+)((\\s+[\\w_']+)+)\\s*(=>)"
          captures:
            1:
              name: 'entity.other.inherited-class.blodwen'
            2:
              name: 'entity.other.attribute-name.blodwen'
            4:
              name: 'keyword.operator.double-arrow.blodwen'
        }
        {
          name: 'meta.context-signature.blodwen'
          comment:
            """For things like '(Eq a, Show b) =>'
            It begins with '(' either followed by ') =>' on the same line,
            or anything but ')' until the end of line."""
          begin: "(\\()((?=.*\\)\\s*=>)|(?=[^)]*$))"
          beginCaptures:
            1:
              name: 'punctuation.context.begin.blodwen'
          end: "(\\))\\s*(=>)"
          endCaptures:
            1:
              name: 'punctuation.context.end.blodwen'
            2:
              name: 'keyword.operator.double-arrow.blodwen'
          patterns:
            [
              {
                name: 'meta.class-constraint.blodwen'
                match: "([\\w']+)\\s+([\\w']+)"
                captures:
                  1:
                    name: 'entity.other.inherited-class.blodwen'
                  2:
                    name: 'entity.other.attribute-name.blodwen'
              }
            ]
        }
      ]
  parameter_type:
    comment: "Parameter types in a type signature"
    patterns:
      [
        {
          include: '#prelude_type'
        }
        {
          name: 'meta.parameter.named.blodwen'
          comment: '(x : Nat)'
          begin: "\\(([\\w']+)\\s*:(?!:)"
          beginCaptures:
            1:
              name: 'entity.name.tag.blodwen'
          end: "\\)"
          patterns:
            [
              {
                include: '#prelude_type'
              }
            ]
        }
        {
          name: 'meta.parameter.implicit.blodwen'
          comment: '{auto p : a = b}'
          begin: "\\{((auto|default .+)\\s+)?([\\w']+)\\s*:(?!:)"
          beginCaptures:
            1:
              name: 'storage.modifier.blodwen'
            3:
              name: 'entity.name.tag.blodwen'
          end: '\\}'
          patterns:
            [
              {
                include: '#prelude_type'
              }
            ]
        }
      ]
  type_signature:
    patterns:
      [
        {
          name: 'keyword.operator.arrow.blodwen'
          match: '->'
        }
        {
          include: '#context_signature'
        }
        {
          include: '#parameter_type'
        }
        {
          include: '#language_const'
        }
      ]
  function_signature:
    name: 'meta.function.type-signature.blodwen'
    begin: "(([\\w']+)|\\(([|!%$+\\-.,=</>:]+)\\))\\s*(:)(?!:)"
    beginCaptures:
      2:
        name: 'entity.name.function.blodwen'
      3:
        name: 'entity.name.function.blodwen'
      4:
        name: 'keyword.operator.colon.blodwen'
    end: "(;|(?=--)|(?<=[^\\s>])\\s*(?!->)\\s*$)"
    patterns:
      [
        {
          include: '#type_signature'
        }
      ]
    comment: """The end patterm is a bit tricky. It's either ';' or something, at the end of the line,
      but not '->', because a type signature can be multiline. Though, it doesn't help, if you
      break the signature before arrows."""
  language_const:
    patterns:
      [
        {
          name: 'constant.language.unit.blodwen'
          match: "\\(\\)"
        }
        {
          name: 'constant.language.bottom.blodwen'
          match: "_\\|_"
        }
        {
          name: 'constant.language.underscore.blodwen'
          match: "\\b_\\b"
        }
      ]
  escape_characters:
    patterns:
      [
        {
          name: 'constant.character.escape.ascii.blodwen'
          match: '\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\"\'\\&])'
        }
        {
          name: 'constant.character.escape.octal.blodwen'
          match: '\\\\o[0-7]+|\\\\x[0-9A-Fa-f]+|\\\\[0-9]+'
        }
        {
          name: 'constant.character.escape.control.blodwen'
          match: '\\^[A-Z@\\[\\]\\\\\\^_]'
        }
      ]
  data_ctor:
    patterns:
      [
        {
          'name': 'entity.name.tag.blodwen'
          'match': '\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\']*)*\\b'
        }
      ]
uuid: '4dd16092-ffa5-4ba4-8075-e5da9f368a72'
